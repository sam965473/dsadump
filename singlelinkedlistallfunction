#include <stdio.h>
#include <stdlib.h>
struct node {
  int data;
  struct node *link;
};
struct node *first;
struct node *second;
struct node * thir;
//anup the  programmmer

void create(struct node **first, int dat) {
  struct node *ptr, *ctr;
  ctr = *first;
  ptr = (struct node *)malloc(sizeof(struct node));
  ptr->data = dat;
  ptr->link = NULL;
  if (*first == NULL) {
    *first = ptr;
  }
  else {
    while (ctr->link != NULL) {
      ctr = ctr->link;
    }
    ctr->link = ptr;
  }
}
struct Node* copyList(struct node* head) 
{ 
    if (head == NULL) { 
        return NULL; 
    } 
    else { 
        struct node* newNode;
        newNode = (struct node*)malloc(sizeof(struct node)); 
  
        newNode->data = head->data; 
        newNode->link = copyList(head->link); 
  
        return newNode; 
    } 
}
void insertatbegining(struct node ** first,int dat){
  struct node * ptr;
    ptr = (struct node *)malloc(sizeof(struct node));
  ptr -> data = dat;
  ptr -> link = *first;
 * first = ptr;
}
void display(struct node *first) {
    struct node *ptr;
    ptr = first;
    while (ptr != NULL) {
        printf("%d\n", ptr->data);
        ptr = ptr->link;
    }
}

void insertafternode(struct node** first,int check , int dat){
  struct node *ptr,*ctr,*ktr;
   ptr = (struct node *)malloc(sizeof(struct node));
  ptr->data = dat;
  ctr = *first;
  ktr = ctr->link;
  while(ctr->data != check){
    ctr = ctr -> link;
    ktr = ktr->link;
  }
  ctr->link = ptr;
  ptr-> link =ktr;

}
void insertatlast(struct node** first, int dat){
  struct node *ptr,*ctr;
   ptr = (struct node *)malloc(sizeof(struct node));
  ctr = *first;
  ptr->data = dat;
  ptr->link = NULL;
  while(ctr->link!=NULL){
    ctr = ctr-> link;
  }
  ctr ->link = ptr;
}
void deletefirstnode(struct node ** first){
  struct node * ptr;
  ptr = *first;
  *first=ptr-> link;
  free(ptr);
  
}
void deletelastnode(struct node ** first){
struct node * ptr,*ctr;
  ptr = *first;
  ctr= ptr->link;
  while(ctr->link!= NULL){
    ptr = ptr-> link;
    ctr = ctr-> link;
    
  }
  ptr->link = NULL;
  free(ctr);
  
}
void deletethespecific(struct node ** first,int dat){
  struct node * ptr,*ctr;
  ptr = *first;
  ctr =ptr->link;
  while(ctr->data!= dat){
    ptr= ptr-> link;
    ctr= ctr-> link;
  }
  ptr->link = ctr->link;
  free(ctr);
    }
void reversal(struct node **first){
  struct node * current,*next , *prev;
  current = *first;
  next = NULL;
  prev= NULL;
  while(current != NULL){
    next = current->link;
    
    current -> link = prev;
    prev = current;
    current = next;
  }
  *first = prev;
  
}
void concatu(struct node**first,struct node **second){
  struct node*ctr,*ptr;
  ctr = *first;
  ptr= *second;
  while(ctr->link != NULL){
    ctr = ctr->link;
  }
 ctr->link = *second;
  *second = NULL;
  
}
void copy (struct node**first,struct node **thir){
    struct node *ctr,*ptr,*head;
    ctr = (struct node*)malloc(sizeof(struct node));
    ptr = *first;
    ctr = *thir;
    ctr = ctr->link;
    
    while(ptr != NULL){
        ctr->data= ptr->data;
        ctr->link = ptr->link;
        ctr = ctr -> link;
        ptr = ptr ->link;
    }

}
int middlenode(struct node ** first){
    struct node *ptr,*ctr;
    ptr =*first;
    ctr =ptr->link->link;
    while(ctr->link != NULL){
        ptr = ptr ->link;
        ctr = ctr->link;
    }
    return ptr->data;
}
int main() {
  create(&first, 10);
  create(&first, 20);
  create(&first, 30);
  create(&first, 40);
  create(&first, 50);
  create(&first, 60);
   create(&second, 10);
   create(&second, 20);
   create(&second, 30);
   create(&second, 40);
   create(&second, 50);
   create(&second, 60);
//   display(first);
//   display(second);
//   copy(&first,&thir);
thir = copyList(first);
  display(thir);
  int a;
  a = middlenode(&first);
  printf("\n%d\n",a);
  
   
  // insertatbegining(&first, 70);
  // insertafternode(&first,40,80);
  
  // deletefirstnode(&first);
  // deletelastnode(&first);
  // deletethespecific(&first,40);
  // insertatlast(&first,90);
  // display(first);
  // reversal(&first);
  // printf("\n");
  // printf("\n");
  // display(first);
//   concatu(&first,&second);
//   printf("\n");
//   display(first);
  return 0;
}
